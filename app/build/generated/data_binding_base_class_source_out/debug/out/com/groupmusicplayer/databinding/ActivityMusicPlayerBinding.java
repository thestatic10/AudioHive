// Generated by view binder compiler. Do not edit!
package com.groupmusicplayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.chip.Chip;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.groupmusicplayer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMusicPlayerBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final LinearLayout bottomSheet;

  @NonNull
  public final ImageButton btnPlayPause;

  @NonNull
  public final FloatingActionButton btnSearch;

  @NonNull
  public final Button btnSearchAction;

  @NonNull
  public final ImageButton btnSkipNext;

  @NonNull
  public final ImageButton btnSkipPrevious;

  @NonNull
  public final Chip chipHost;

  @NonNull
  public final TextInputEditText etSearch;

  @NonNull
  public final ImageView ivAlbumArt;

  @NonNull
  public final LinearLayout layoutCurrentTrack;

  @NonNull
  public final LinearLayout layoutNoTrack;

  @NonNull
  public final ProgressBar progressSearch;

  @NonNull
  public final RecyclerView rvQueue;

  @NonNull
  public final RecyclerView rvSearchResults;

  @NonNull
  public final RecyclerView rvUsers;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView tvCurrentArtist;

  @NonNull
  public final TextView tvCurrentTrack;

  @NonNull
  public final TextView tvQueueCount;

  @NonNull
  public final TextView tvQueueEmpty;

  @NonNull
  public final TextView tvRoomCode;

  @NonNull
  public final TextView tvUsersCount;

  private ActivityMusicPlayerBinding(@NonNull CoordinatorLayout rootView,
      @NonNull LinearLayout bottomSheet, @NonNull ImageButton btnPlayPause,
      @NonNull FloatingActionButton btnSearch, @NonNull Button btnSearchAction,
      @NonNull ImageButton btnSkipNext, @NonNull ImageButton btnSkipPrevious,
      @NonNull Chip chipHost, @NonNull TextInputEditText etSearch, @NonNull ImageView ivAlbumArt,
      @NonNull LinearLayout layoutCurrentTrack, @NonNull LinearLayout layoutNoTrack,
      @NonNull ProgressBar progressSearch, @NonNull RecyclerView rvQueue,
      @NonNull RecyclerView rvSearchResults, @NonNull RecyclerView rvUsers,
      @NonNull MaterialToolbar toolbar, @NonNull TextView tvCurrentArtist,
      @NonNull TextView tvCurrentTrack, @NonNull TextView tvQueueCount,
      @NonNull TextView tvQueueEmpty, @NonNull TextView tvRoomCode,
      @NonNull TextView tvUsersCount) {
    this.rootView = rootView;
    this.bottomSheet = bottomSheet;
    this.btnPlayPause = btnPlayPause;
    this.btnSearch = btnSearch;
    this.btnSearchAction = btnSearchAction;
    this.btnSkipNext = btnSkipNext;
    this.btnSkipPrevious = btnSkipPrevious;
    this.chipHost = chipHost;
    this.etSearch = etSearch;
    this.ivAlbumArt = ivAlbumArt;
    this.layoutCurrentTrack = layoutCurrentTrack;
    this.layoutNoTrack = layoutNoTrack;
    this.progressSearch = progressSearch;
    this.rvQueue = rvQueue;
    this.rvSearchResults = rvSearchResults;
    this.rvUsers = rvUsers;
    this.toolbar = toolbar;
    this.tvCurrentArtist = tvCurrentArtist;
    this.tvCurrentTrack = tvCurrentTrack;
    this.tvQueueCount = tvQueueCount;
    this.tvQueueEmpty = tvQueueEmpty;
    this.tvRoomCode = tvRoomCode;
    this.tvUsersCount = tvUsersCount;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMusicPlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMusicPlayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_music_player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMusicPlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_sheet;
      LinearLayout bottomSheet = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheet == null) {
        break missingId;
      }

      id = R.id.btn_play_pause;
      ImageButton btnPlayPause = ViewBindings.findChildViewById(rootView, id);
      if (btnPlayPause == null) {
        break missingId;
      }

      id = R.id.btn_search;
      FloatingActionButton btnSearch = ViewBindings.findChildViewById(rootView, id);
      if (btnSearch == null) {
        break missingId;
      }

      id = R.id.btn_search_action;
      Button btnSearchAction = ViewBindings.findChildViewById(rootView, id);
      if (btnSearchAction == null) {
        break missingId;
      }

      id = R.id.btn_skip_next;
      ImageButton btnSkipNext = ViewBindings.findChildViewById(rootView, id);
      if (btnSkipNext == null) {
        break missingId;
      }

      id = R.id.btn_skip_previous;
      ImageButton btnSkipPrevious = ViewBindings.findChildViewById(rootView, id);
      if (btnSkipPrevious == null) {
        break missingId;
      }

      id = R.id.chip_host;
      Chip chipHost = ViewBindings.findChildViewById(rootView, id);
      if (chipHost == null) {
        break missingId;
      }

      id = R.id.et_search;
      TextInputEditText etSearch = ViewBindings.findChildViewById(rootView, id);
      if (etSearch == null) {
        break missingId;
      }

      id = R.id.iv_album_art;
      ImageView ivAlbumArt = ViewBindings.findChildViewById(rootView, id);
      if (ivAlbumArt == null) {
        break missingId;
      }

      id = R.id.layout_current_track;
      LinearLayout layoutCurrentTrack = ViewBindings.findChildViewById(rootView, id);
      if (layoutCurrentTrack == null) {
        break missingId;
      }

      id = R.id.layout_no_track;
      LinearLayout layoutNoTrack = ViewBindings.findChildViewById(rootView, id);
      if (layoutNoTrack == null) {
        break missingId;
      }

      id = R.id.progress_search;
      ProgressBar progressSearch = ViewBindings.findChildViewById(rootView, id);
      if (progressSearch == null) {
        break missingId;
      }

      id = R.id.rv_queue;
      RecyclerView rvQueue = ViewBindings.findChildViewById(rootView, id);
      if (rvQueue == null) {
        break missingId;
      }

      id = R.id.rv_search_results;
      RecyclerView rvSearchResults = ViewBindings.findChildViewById(rootView, id);
      if (rvSearchResults == null) {
        break missingId;
      }

      id = R.id.rv_users;
      RecyclerView rvUsers = ViewBindings.findChildViewById(rootView, id);
      if (rvUsers == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tv_current_artist;
      TextView tvCurrentArtist = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentArtist == null) {
        break missingId;
      }

      id = R.id.tv_current_track;
      TextView tvCurrentTrack = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentTrack == null) {
        break missingId;
      }

      id = R.id.tv_queue_count;
      TextView tvQueueCount = ViewBindings.findChildViewById(rootView, id);
      if (tvQueueCount == null) {
        break missingId;
      }

      id = R.id.tv_queue_empty;
      TextView tvQueueEmpty = ViewBindings.findChildViewById(rootView, id);
      if (tvQueueEmpty == null) {
        break missingId;
      }

      id = R.id.tv_room_code;
      TextView tvRoomCode = ViewBindings.findChildViewById(rootView, id);
      if (tvRoomCode == null) {
        break missingId;
      }

      id = R.id.tv_users_count;
      TextView tvUsersCount = ViewBindings.findChildViewById(rootView, id);
      if (tvUsersCount == null) {
        break missingId;
      }

      return new ActivityMusicPlayerBinding((CoordinatorLayout) rootView, bottomSheet, btnPlayPause,
          btnSearch, btnSearchAction, btnSkipNext, btnSkipPrevious, chipHost, etSearch, ivAlbumArt,
          layoutCurrentTrack, layoutNoTrack, progressSearch, rvQueue, rvSearchResults, rvUsers,
          toolbar, tvCurrentArtist, tvCurrentTrack, tvQueueCount, tvQueueEmpty, tvRoomCode,
          tvUsersCount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
